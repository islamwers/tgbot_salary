const { Telegraf, Markup } = require('telegraf');
const { google } = require('googleapis');
const fs = require('fs');
const path = require('path');
const fetch = require('node-fetch');
require('dotenv').config();
const ACCESS_PASSWORD = process.env.BOT_PASSWORD;
const authorizedUsers = {}; // –•—Ä–∞–Ω–∏—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

const bot = new Telegraf(process.env.BOT_TOKEN);
const SHEET_ID = process.env.SHEET_ID;
const TEMPLATE_SHEET_NAME = '–ü—Ä–æ–µ–∫—Ç 1 (–ê–º—É—Ä–ú–∏–Ω–µ—Ä–∞–ª—Å)';
let userState = {};

bot.start(async (ctx) => {
  const chatId = ctx.chat.id;

  // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
  if (!authorizedUsers[chatId]) {
    return ctx.reply('üîê –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞:');
  }

  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤
  userState[chatId] = {};

  try {
    const auth = new google.auth.GoogleAuth({
      keyFile: 'credentials.json',
      scopes: ['https://www.googleapis.com/auth/spreadsheets']
    });

    const client = await auth.getClient();
    const sheets = google.sheets({ version: 'v4', auth: client });

    const spreadsheet = await sheets.spreadsheets.get({ spreadsheetId: SHEET_ID });
    const sheetNames = spreadsheet.data.sheets.map(s => s.properties.title);

    const projectButtons = sheetNames.map(name => [`üìÇ ${name}`]); // –ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ

    await ctx.reply(
      'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:',
      Markup.keyboard([
        ...projectButtons,
        ['‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç'],
        ['üöÄ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ']
      ]).resize().oneTime()
    );
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–µ–∫—Ç–æ–≤:', err);
    ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤.');
  }
});



bot.action(/^project:(.+)$/, async (ctx) => {
  const projectName = ctx.match[1];
  const chatId = ctx.chat.id;

  if (projectName === 'new') {
    const newSheetName = `–ü—Ä–æ–µ–∫—Ç ${Date.now()}`;
    try {
      await copySheet(TEMPLATE_SHEET_NAME, newSheetName);
      userState[chatId] = { sheet: newSheetName };
      ctx.reply(`‚úÖ –ù–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç —Å–æ–∑–¥–∞–Ω: ${newSheetName}`);
    } catch (err) {
      return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç');
    }
  } else {
    userState[chatId] = { sheet: projectName };
  }

  ctx.reply(
    '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏?',
    Markup.inlineKeyboard([
      [Markup.button.callback('‚ûï –†–∞—Å—Ö–æ–¥', 'input:expense')],
      [Markup.button.callback('üí∞ –î–æ—Ö–æ–¥', 'input:income')],
      [Markup.button.callback('ü§ñ AI-–≤–≤–æ–¥', 'input:ai')],
      [Markup.button.callback('üì§ –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É', 'download')],
      [Markup.button.callback('üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π', 'preview')],
      [Markup.button.callback('üîô –ö –ø—Ä–æ–µ–∫—Ç–∞–º', 'back_to_projects')]
    ])
  );
});

bot.action('download', async (ctx) => {
  const state = userState[ctx.chat.id];
  if (!state?.sheet) return ctx.reply('–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç');

  const auth = new google.auth.GoogleAuth({
    keyFile: 'credentials.json',
    scopes: ['https://www.googleapis.com/auth/drive.readonly']
  });
  const drive = google.drive({ version: 'v3', auth: await auth.getClient() });

  try {
    const res = await drive.files.export(
      {
        fileId: SHEET_ID,
        mimeType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
      },
      { responseType: 'arraybuffer' }
    );

    const buffer = Buffer.from(res.data);

    await ctx.replyWithDocument({
      source: buffer,
      filename: '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π_–æ—Ç—á–µ—Ç.xlsx'
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ç–∞–±–ª–∏—Ü—ã:', err.message);
    ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ SHEET_ID –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏ —Ç–∞–±–ª–∏—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω–∞.');
  }
});



bot.action('preview', async (ctx) => {
  const chatId = ctx.chat.id;
  const state = userState[chatId];
  if (!state?.sheet) return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç —Å–Ω–∞—á–∞–ª–∞.');

  const sheets = google.sheets({
    version: 'v4',
    auth: await new google.auth.GoogleAuth({
      keyFile: 'credentials.json',
      scopes: ['https://www.googleapis.com/auth/spreadsheets']
    }).getClient()
  });

  try {
    const res = await sheets.spreadsheets.values.get({
      spreadsheetId: SHEET_ID,
      range: `'${state.sheet}'!A2:F`
    });

    const rows = res.data.values || [];
    const last5 = rows.slice(-5);

    if (!last5.length) return ctx.reply('–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π.');

    last5.forEach((row, index) => {
      const [
        date = '‚Äî',
        category = '‚Äî',
        amountNoVAT = '‚Äî',
        amountWithVAT = '‚Äî',
        vat = '‚Äî',
        comment = '‚Äî'
      ] = row;

      ctx.reply(
        `–ó–∞–ø–∏—Å—å ${index + 1}:\n` +
        `üìÖ –î–∞—Ç–∞ –≤–Ω–µ—Å–µ–Ω–∏—è: ${date}\n` +
        `üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${category}\n` +
        `üíµ –°—É–º–º–∞ –±–µ–∑ –ù–î–°: —Ä.${amountNoVAT}\n` +
        `üí∞ –°—É–º–º–∞ —Å –ù–î–°: —Ä.${amountWithVAT}\n` +
        `üßæ –ù–î–°: —Ä.${vat}\n` +
        `üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment || '‚Äî'}`
      );
    });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
    ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏.');
  }
});


bot.action(/^input:(.+)$/, (ctx) => {
  const type = ctx.match[1];
  const chatId = ctx.chat.id;
  const state = userState[chatId];
  if (!state) return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /start.');

  state.step = type;
  state.data = { date: new Date().toISOString().split('T')[0] };

  if (type === 'income') {
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ –¥–æ—Ö–æ–¥–µ: –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π');
    state.substep = 'info';
  } else if (type === 'expense') {
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:', Markup.keyboard([
      ['–ó–∞–∫—É–ø–∫–∞ –≠–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–Ω—ã—Ö –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤', '–ó–∞–∫—É–ø–∫–∞ –°–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤'], ['–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ', '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ'],
      ['–°–ø–µ—Ü–æ–¥–µ–∂–¥–∞', '–û–±—É—á–µ–Ω–∏–µ'], ['–ù–î–°', '–ù–ü'], ['–ü—Ä–æ–µ–∑–¥ (—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã)', '–õ–∏–∑–∏–Ω–≥'], ['–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã']
    ]).oneTime().resize());
    state.substep = 'category';
  } else if (type === 'ai') {
    ctx.reply(`üí∞ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Ö–æ–¥–æ–º/—Ä–∞—Å—Ö–æ–¥–æ–º:
(–ø—Ä–∏–º–µ—Ä: 
üíµ 1. –î–æ—Ö–æ–¥: —Å–≤–µ–¥–µ–Ω–∏—è –æ –¥–æ—Ö–æ–¥–µ - ..., —Å—É–º–º–∞ 50000 (–±–µ–∑ —É—á–µ—Ç–∞ –ù–î–°), –¥–∞—Ç–∞: 01.05.2025

üßæ 2. –†–∞—Å—Ö–æ–¥: —Å—Ç–æ–∏–º–æ—Å—Ç—å 10000 (—Å —É—á–µ—Ç–æ–º –ù–î–° –∏–ª–∏ –±–µ–∑ —É—á–µ—Ç–∞ –ù–î–°), –∫–∞—Ç–µ–≥–æ—Ä–∏—è - –§–û–¢ –†–ü, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)`);
    state.substep = 'ai_wait';
  }
});

bot.on('text', async (ctx) => {
  const chatId = ctx.chat.id;
  const text = ctx.message.text.trim();

  if (!authorizedUsers[chatId]) {
    if (text === ACCESS_PASSWORD) {
      try {
        await ctx.deleteMessage(ctx.message.message_id);
      } catch (err) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º:', err.message);
      }

      authorizedUsers[chatId] = true;

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
      userState[chatId] = {};
      // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
      const auth = new google.auth.GoogleAuth({
        keyFile: 'credentials.json',
        scopes: ['https://www.googleapis.com/auth/spreadsheets']
      });
      const client = await auth.getClient();
      const sheets = google.sheets({ version: 'v4', auth: client });

      const spreadsheet = await sheets.spreadsheets.get({ spreadsheetId: SHEET_ID });
      const sheetNames = spreadsheet.data.sheets.map(s => s.properties.title);

      // –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –ª–∏—Å—Ç–æ–≤
      const projectButtons = sheetNames.map(name => [`üìÇ ${name}`]);

      await ctx.reply(
        '‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π:',
        Markup.keyboard([
          ...projectButtons,
          ['‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç'],
          ['üöÄ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ']
        ]).resize().oneTime()
      );

    } else {
    return ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:');
    }
  }


  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî –ë–ï–ó state
  if (text.startsWith('üìÇ ')) {
    const projectName = text.replace('üìÇ ', '');
    userState[chatId] = { sheet: projectName };

    return ctx.reply(
      '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏?',
      Markup.inlineKeyboard([
        [Markup.button.callback('‚ûï –†–∞—Å—Ö–æ–¥', 'input:expense'), Markup.button.callback('üí∞ –î–æ—Ö–æ–¥', 'input:income')],
        [Markup.button.callback('ü§ñ AI-–≤–≤–æ–¥', 'input:ai'), Markup.button.callback('üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π', 'preview')],
        [Markup.button.callback('üì§ –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É', 'download')],
        [Markup.button.callback('üîô –ö –ø—Ä–æ–µ–∫—Ç–∞–º', 'back_to_projects')]
      ])
    );
  }


  if (text === '‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç') {
  userState[chatId] = { ...userState[chatId], creatingProject: true };
  return ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ (—ç—Ç–æ –±—É–¥–µ—Ç –∏–º—è –Ω–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∞ –≤ Google —Ç–∞–±–ª–∏—Ü–µ):');
  }

  if (userState[chatId]?.creatingProject) {
    const projectName = text.trim();
    if (!projectName) return ctx.reply('‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');

    try {
      await copySheet(TEMPLATE_SHEET_NAME, projectName);
      userState[chatId] = {
        sheet: projectName,
        step: null,
        data: {},
        lastRow: {}
      };
      delete userState[chatId].creatingProject; // ‚Üê‚ùó –∫–ª—é—á–µ–≤–∞—è —Å—Ç—Ä–æ–∫–∞: —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
      return ctx.reply(
        `‚úÖ –ü—Ä–æ–µ–∫—Ç "${projectName}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –≤—ã–±—Ä–∞–Ω.`,
        Markup.inlineKeyboard([
          [Markup.button.callback('‚ûï –†–∞—Å—Ö–æ–¥', 'input:expense'), Markup.button.callback('üí∞ –î–æ—Ö–æ–¥', 'input:income')],
          [Markup.button.callback('ü§ñ AI-–≤–≤–æ–¥', 'input:ai'), Markup.button.callback('üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π', 'preview')],
          [Markup.button.callback('üì§ –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É', 'download')],
          [Markup.button.callback('üîô –ú–µ–Ω—é –ø—Ä–æ–µ–∫—Ç–æ–≤', 'back_to_projects')]
        ])
      );
    } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:', err.message);
    return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.');
    }
  }


  if (text === 'üöÄ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ') {
    return bot.start(ctx);
  }

  // –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ state —É–∂–µ –µ—Å—Ç—å
  const state = userState[chatId];
  if (!state || !state.step) return ctx.reply('–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.');

  // ---- –†—É—á–Ω–æ–π –≤–≤–æ–¥ –¥–æ—Ö–æ–¥–∞ ----
  if (state.step === 'income') {
    if (state.substep === 'info') {
      state.data.info = text;
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å –ù–î–° –∏–ª–∏ –±–µ–∑ –ù–î–° (–Ω–∞–ø—Ä–∏–º–µ—Ä: "5000" –∏–ª–∏ "5000 —Å –ù–î–°")');
      state.substep = 'amount';
    } else if (state.substep === 'amount') {
      const amountMatch = text.match(/(\d+(\.\d+)?)(\s*—Å\s*–Ω–¥—Å)?/i);
      if (!amountMatch) return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.');

      const value = parseFloat(amountMatch[1]);
      const isWithVAT = /—Å\s*–Ω–¥—Å/i.test(text);

      if (isWithVAT) {
        state.data.amountWithVAT = value;
        state.data.amountNoVAT = +(value / 1.2).toFixed(2);
        state.data.vat = +(value - state.data.amountNoVAT).toFixed(2);
      } else {
        state.data.amountNoVAT = value;
        state.data.amountWithVAT = +(value * 1.2).toFixed(2);
        state.data.vat = +(state.data.amountWithVAT - value).toFixed(2);
      }
      console.log('üìå State before confirm:', state);
      state.lastRow = { type: 'income' };
      await confirmLastEntry(ctx, state);
      
    }
    return;
  }

  // ---- –†—É—á–Ω–æ–π –≤–≤–æ–¥ —Ä–∞—Å—Ö–æ–¥–∞ ----
  if (state.step === 'expense') {
    if (state.substep === 'category') {
      state.data.category = text;
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å –ù–î–° –∏–ª–∏ –±–µ–∑ –ù–î–° (–Ω–∞–ø—Ä–∏–º–µ—Ä: "5000" –∏–ª–∏ "5000 —Å –ù–î–°")');
      state.substep = 'amount';
    } else if (state.substep === 'amount') {
      const amountMatch = text.match(/(\d+(\.\d+)?)(\s*—Å\s*–Ω–¥—Å)?/i);
      if (!amountMatch) return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.');

      const value = parseFloat(amountMatch[1]);
      const isWithVAT = /—Å\s*–Ω–¥—Å/i.test(text);

      if (isWithVAT) {
        state.data.amountWithVAT = value;
        state.data.amountNoVAT = +(value / 1.2).toFixed(2);
        state.data.vat = +(value - state.data.amountNoVAT).toFixed(2);
      } else {
        state.data.amountNoVAT = value;
        state.data.amountWithVAT = +(value * 1.2).toFixed(2);
        state.data.vat = +(state.data.amountWithVAT - value).toFixed(2);
      }

      ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ "-" –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞):');
      state.substep = 'comment';
    } else if (state.substep === 'comment') {
      state.data.comment = text === '-' ? '' : text;
      console.log('üìå State before confirm:', state);
      state.lastRow = { type: 'expense' };
      await confirmLastEntry(ctx, state);
    }
    return;
  }

  // ---- AI –≤–≤–æ–¥ ----
  if (state.step === 'ai' && state.substep === 'ai_wait') {
    const prompt = `–ü—Ä–µ–æ–±—Ä–∞–∑—É–π —Ç–µ–∫—Å—Ç –≤ JSON —Å –ø–æ–ª—è–º–∏:
{
  "type": "–î–æ—Ö–æ–¥ –∏–ª–∏ –†–∞—Å—Ö–æ–¥",
  "category": "–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤: (–æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∑ —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞: 1.	–†–∞—Å—Ö–æ–¥—ã —Å –ù–î–° 2.	–†–∞—Å—Ö–æ–¥—ã –±–µ–∑ –ù–î–° 3.	–§–û–¢ –ú–û–ù–¢–ê–ñ–ù–ò–ö–ò 4.	–§–û–¢ –ò–¢–† 5.	–§–û–¢ –†–ü
)",
  "amount": "—Å—É–º–º–∞ –±–µ–∑ –ù–î–° (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ). –°–¥–µ–ª–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ–º, —á—Ç–æ —ç—Ç–∞ —Å—É–º–º–∞ –±–µ–∑ —É—á–µ—Ç–∞ –Ω–∞–ª–æ–≥–∞ (–±–µ–∑ –ù–î–°). –ü—Ä–∏—á–µ–º –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–æ 10–∫, —Ç–æ —ç—Ç–æ 10000, 1 –º–ª–Ω - —ç—Ç–æ 1000000 –∏ —Ç.–¥",
  "amount1": "—Å—É–º–º–∞ —Å –ù–î–° (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ). –°–¥–µ–ª–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ–º, —á—Ç–æ —ç—Ç–∞ —Å—É–º–º–∞ —Å —É—á–µ—Ç–æ–º –Ω–∞–ª–æ–≥–∞ (—Å –ù–î–°). –ü—Ä–∏—á–µ–º –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–æ 10–∫, —Ç–æ —ç—Ç–æ 10000, 1 –º–ª–Ω - —ç—Ç–æ 1000000 –∏ —Ç.–¥",
  "date": "–¥–∞—Ç–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î). –ï—Å–ª–∏ –±—É–¥–µ—Ç —É–∫–∞–∑–∞–Ω–æ "—Å–µ–≥–æ–¥–Ω—è", —Ç–æ —É–∫–∞–∂–∏ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É (—Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é)",
  "comment": "–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)"
}
–í–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û JSON –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π. –í–æ—Ç —Ç–µ–∫—Å—Ç: "${text}"`;

    const controller = new AbortController();
    const timeout = setTimeout(() => controller.abort(), 10000);

    try {
      const response = await fetch('https://api.deepseek.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${process.env.DEEPSEEK_API_KEY}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          model: 'deepseek-chat',
          messages: [
            { role: 'system', content: '–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ JSON.' },
            { role: 'user', content: prompt }
          ],
          temperature: 0.3,
          max_tokens: 1000
        }),
        signal: controller.signal
      });

      clearTimeout(timeout);
      const result = await response.json();

      if (result.error) {
        console.error('DeepSeek error:', result.error.message);
        ctx.reply(`‚ö†Ô∏è GPT –æ—à–∏–±–∫–∞: ${result.error.message}`);
        return;
      }

      const raw = result.choices?.[0]?.message?.content || '';
      const cleaned = raw.replace(/```json|```/g, '').trim();
      const extracted = JSON.parse(cleaned);

      const date = extracted.date || new Date().toISOString().split('T')[0];
      const comment = extracted.comment || '';
      const amount = parseFloat(extracted.amount);

      if (isNaN(amount)) return ctx.reply('‚ö†Ô∏è AI –Ω–µ —Å–º–æ–≥ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å—É–º–º—É.');

      if (extracted.type?.toLowerCase() === '–¥–æ—Ö–æ–¥') {
        const incomeData = {
          date,
          info: extracted.description || 'AI –¥–æ—Ö–æ–¥',
          amountNoVAT: amount,
          amountWithVAT: +(amount * 1.2).toFixed(2),
          vat: +(amount * 0.2).toFixed(2)
        };
        state.data = incomeData;
        state.lastRow = { type: 'income' };
        console.log('üìå State before confirm:', state);
        await confirmLastEntry(ctx, state);
      } else if (extracted.type?.toLowerCase() === '—Ä–∞—Å—Ö–æ–¥') {
        const expenseData = {
          date,
          category: extracted.category || '–ü—Ä–æ—á–µ–µ',
          amountNoVAT: amount,
          amountWithVAT: +(amount * 1.2).toFixed(2),
          vat: +(amount * 0.2).toFixed(2),
          comment
        };
        state.data = expenseData;
        state.lastRow = { type: 'expense' };
        console.log('üìå State before confirm:', state);
        await confirmLastEntry(ctx, state);
      }
      else {
        ctx.reply('‚ö†Ô∏è AI –Ω–µ —Å–º–æ–≥ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø: –î–æ—Ö–æ–¥ –∏–ª–∏ –†–∞—Å—Ö–æ–¥.');
      }
    } catch (err) {
      if (err.name === 'AbortError') {
        ctx.reply('‚ö†Ô∏è GPT –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è.');
      } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ AI-–≤–≤–æ–¥–∞:', err);
        ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å AI-–≤–≤–æ–¥.');
      }
    }

    // delete userState[chatId]; —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    return;
  }
});

async function appendExpense(state) {
  const auth = new google.auth.GoogleAuth({
    keyFile: 'credentials.json',
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
  });
  const sheets = google.sheets({ version: 'v4', auth: await auth.getClient() });

  const values = [[
    state.data.date,
    state.data.category,
    state.data.amountNoVAT,
    state.data.amountWithVAT,
    state.data.vat,
    state.data.comment || ''
  ]];

  const res = await sheets.spreadsheets.values.append({
    spreadsheetId: SHEET_ID,
    range: `'${state.sheet}'!A1:F1`,
    valueInputOption: 'USER_ENTERED',
    insertDataOption: 'INSERT_ROWS',
    requestBody: { values }
  });

  const updatedRange = res.data.updates.updatedRange;
  const rowIndex = parseInt(updatedRange.match(/!(?:[A-Z]+)(\d+)/)[1]);
  state.lastRow = { index: rowIndex, type: 'expense' };
console.log('‚úÖ Expense appended, state updated:', state.lastRow);
}

async function appendIncome(state) {
  const auth = new google.auth.GoogleAuth({
    keyFile: 'credentials.json',
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
  });
  const sheets = google.sheets({ version: 'v4', auth: await auth.getClient() });

  const values = [[
    state.data.date,
    state.data.info,
    state.data.amountNoVAT,
    state.data.amountWithVAT,
    state.data.vat
  ]];

  const res = await sheets.spreadsheets.values.append({
    spreadsheetId: SHEET_ID,
    range: `'${state.sheet}'!H1:L1`,
    valueInputOption: 'USER_ENTERED',
    insertDataOption: 'INSERT_ROWS',
    requestBody: { values }
  });

  const updatedRange = res.data.updates.updatedRange;
  const rowIndex = parseInt(updatedRange.match(/!(?:[A-Z]+)(\d+)/)[1]);
  state.lastRow = { index: rowIndex, type: 'income' };
console.log('‚úÖ Income appended, state updated:', state.lastRow);
}



async function confirmLastEntry(ctx, state) {
  const data = state.data;
  if (state.lastRow.type === 'expense') {
    await ctx.reply(
      `‚úÖ –ó–∞–ø–∏—Å—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:
üìÖ –î–∞—Ç–∞ –≤–Ω–µ—Å–µ–Ω–∏—è: ${data.date}
üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${data.category}
üíµ –°—É–º–º–∞ –±–µ–∑ –ù–î–°: —Ä.${data.amountNoVAT.toLocaleString('ru-RU')}
üí∞ –°—É–º–º–∞ —Å –ù–î–°: —Ä.${data.amountWithVAT.toLocaleString('ru-RU')}
üßæ –ù–î–°: —Ä.${data.vat.toLocaleString('ru-RU')}
üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${data.comment || '‚Äî'}`,
      Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å', 'keep_last')],
        [Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å', 'delete_last')]
      ])
    );
  } else {
    await ctx.reply(
      `‚úÖ –ó–∞–ø–∏—Å—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:
üìÖ –î–∞—Ç–∞ –≤–Ω–µ—Å–µ–Ω–∏—è: ${data.date}
üßæ –°–≤–µ–¥–µ–Ω–∏—è –æ –¥–æ—Ö–æ–¥–µ: ${data.info}
üí∞ –ü—Ä–∏—à–ª–æ —Å –ù–î–°: —Ä.${data.amountWithVAT.toLocaleString('ru-RU')}
üíµ –ë–µ–∑ –ù–î–°: —Ä.${data.amountNoVAT.toLocaleString('ru-RU')}
üßæ –ù–î–°: —Ä.${data.vat.toLocaleString('ru-RU')}`,
      Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –û—Å—Ç–∞–≤–∏—Ç—å', 'keep_last')],
        [Markup.button.callback('üóë –£–¥–∞–ª–∏—Ç—å', 'delete_last')]
      ])
    );
  }
}



bot.action('keep_last', async (ctx) => {
  const chatId = ctx.chat.id;
  const state = userState[chatId];
  if (!state?.data || !state?.lastRow) return ctx.reply('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.');

  const auth = new google.auth.GoogleAuth({
    keyFile: 'credentials.json',
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
  });
  const sheets = google.sheets({ version: 'v4', auth: await auth.getClient() });

  let updatedRange, rowIndex;

  if (state.lastRow.type === 'income') {
    const values = [[
      state.data.date,
      state.data.info,
      state.data.amountNoVAT,
      state.data.amountWithVAT,
      state.data.vat
    ]];

    const res = await sheets.spreadsheets.values.append({
      spreadsheetId: SHEET_ID,
      range: `'${state.sheet}'!H1:L1`,
      valueInputOption: 'USER_ENTERED',
      insertDataOption: 'INSERT_ROWS',
      requestBody: { values }
    });

    updatedRange = res.data.updates.updatedRange;
    rowIndex = parseInt(updatedRange.match(/\d+/)[0]);
    state.lastRow.index = rowIndex;

  } else {
    const values = [[
      state.data.date,
      state.data.category,
      state.data.amountNoVAT,
      state.data.amountWithVAT,
      state.data.vat,
      state.data.comment || ''
    ]];

    const res = await sheets.spreadsheets.values.append({
      spreadsheetId: SHEET_ID,
      range: `'${state.sheet}'!A1:F1`,
      valueInputOption: 'USER_ENTERED',
      insertDataOption: 'INSERT_ROWS',
      requestBody: { values }
    });

    updatedRange = res.data.updates.updatedRange;
    rowIndex = parseInt(updatedRange.match(/\d+/)[0]);
    state.lastRow.index = rowIndex;
  }

  // ‚úÖ –û—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
  await ctx.reply('‚úÖ –ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É.', Markup.inlineKeyboard([
    [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë', 'start_over')],
    [Markup.button.callback('üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏', 'preview')],
    [Markup.button.callback('üîô –í –º–µ–Ω—é', 'back_to_menu')]
  ]));

  // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—É—é —á–∞—Å—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
  userState[chatId] = {
    sheet: state.sheet,
    step: state.lastRow.type,
    lastRow: { type: state.lastRow.type }
  };
});



async function copySheet(fromSheetName, toSheetName) {
  const auth = new google.auth.GoogleAuth({
    keyFile: 'credentials.json',
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
  });
  const client = await auth.getClient();
  const sheets = google.sheets({ version: 'v4', auth: client });

  const spreadsheet = await sheets.spreadsheets.get({ spreadsheetId: SHEET_ID });
  const fromSheet = spreadsheet.data.sheets.find(s => s.properties.title === fromSheetName);

  if (!fromSheet) throw new Error('–®–∞–±–ª–æ–Ω–Ω—ã–π –ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω');

  const copy = await sheets.spreadsheets.sheets.copyTo({
    spreadsheetId: SHEET_ID,
    sheetId: fromSheet.properties.sheetId,
    requestBody: { destinationSpreadsheetId: SHEET_ID },
  });

  const newSheetId = copy.data.sheetId;

  await sheets.spreadsheets.batchUpdate({
    spreadsheetId: SHEET_ID,
    requestBody: {
      requests: [{
        updateSheetProperties: {
          properties: {
            sheetId: newSheetId,
            title: toSheetName
          },
          fields: 'title'
        }
      }]
    }
  });

  // ‚úÖ –û—á–∏—Å—Ç–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤, –¥–æ—Ö–æ–¥–æ–≤, —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
  await sheets.spreadsheets.values.batchClear({
    spreadsheetId: SHEET_ID,
    requestBody: {
      ranges: [
        `'${toSheetName}'!A2:F`, // –†–∞—Å—Ö–æ–¥—ã
        `'${toSheetName}'!H2:L`, // –î–æ—Ö–æ–¥—ã
        `'${toSheetName}'!N2:U`  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
      ]
    }
  });
}

module.exports.handler = async function(event) {
  try {
    const body = typeof event.body === 'string' ? JSON.parse(event.body) : event.body;
    await bot.handleUpdate(body);
    return { statusCode: 200, body: 'ok' };
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', err.message);
    return { statusCode: 500, body: 'Internal Server Error' };
  }
};

bot.action('delete_last', async (ctx) => {
  const chatId = ctx.chat.id;
  const oldState = userState[chatId];
  userState[chatId] = { sheet: oldState?.sheet }; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç

  await ctx.reply('üóë –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞ (–æ—Ç–º–µ–Ω–µ–Ω–∞).');

  await ctx.reply(
    '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏?',
    Markup.inlineKeyboard([
      [Markup.button.callback('‚ûï –†–∞—Å—Ö–æ–¥', 'input:expense'), Markup.button.callback('üí∞ –î–æ—Ö–æ–¥', 'input:income')],
      [Markup.button.callback('ü§ñ AI-–≤–≤–æ–¥', 'input:ai'), Markup.button.callback('üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π', 'preview')],
      [Markup.button.callback('üì§ –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É', 'download')],
      [Markup.button.callback('üîô –ö –ø—Ä–æ–µ–∫—Ç–∞–º', 'back_to_projects')]
    ])
  );
});


bot.action('create_project', async (ctx) => {
  const chatId = ctx.chat.id;
  userState[chatId] = { ...userState[chatId], creatingProject: true };
  await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ (—ç—Ç–æ –±—É–¥–µ—Ç –∏–º—è –Ω–æ–≤–æ–≥–æ –ª–∏—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ):');
});

bot.action('back_to_projects', async (ctx) => {
  const chatId = ctx.chat.id;
  userState[chatId] = {}; // –°–±—Ä–æ—Å–∏–º –≤—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞

  const auth = new google.auth.GoogleAuth({
    keyFile: 'credentials.json',
    scopes: ['https://www.googleapis.com/auth/spreadsheets']
  });
  const sheets = google.sheets({ version: 'v4', auth: await auth.getClient() });

  try {
    const sheetMeta = await sheets.spreadsheets.get({ spreadsheetId: SHEET_ID });
    const sheetTitles = sheetMeta.data.sheets.map(s => s.properties.title);

    const buttons = sheetTitles.map(name => [Markup.button.callback(name, `project:${name}`)]);
    buttons.push([Markup.button.callback('üìÅ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç', 'create_project')]);

    await ctx.reply(
      '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç:',
      Markup.inlineKeyboard(buttons)
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–æ–µ–∫—Ç–∞–º:', err.message);
    ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤.');
  }
});


bot.action('start_over', (ctx) => {
  const chatId = ctx.chat.id;
  const state = userState[chatId];

  if (!state || !state.lastRow?.type) {
    return ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.');
  }

  const type = state.lastRow.type;

  if (type === 'income') {
    state.step = 'income';
    state.substep = 'info';
    state.data = { date: new Date().toISOString().split('T')[0] };
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ –¥–æ—Ö–æ–¥–µ: –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π');
  }

  else if (type === 'expense') {
    state.step = 'expense';
    state.substep = 'category';
    state.data = { date: new Date().toISOString().split('T')[0] };
    ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:', Markup.keyboard([
      ['–ó–∞–∫—É–ø–∫–∞ –≠–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂–Ω—ã—Ö –ú–∞—Ç–µ—Ä–∏–∞–ª–æ–≤', '–ó–∞–∫—É–ø–∫–∞ –°–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤'],
      ['–ü—Ä–æ–∂–∏–≤–∞–Ω–∏–µ', '–ê–≤—Ç–æ–º–æ–±–∏–ª–∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ'],
      ['–°–ø–µ—Ü–æ–¥–µ–∂–¥–∞', '–û–±—É—á–µ–Ω–∏–µ'],
      ['–ù–î–°', '–ù–ü'],
      ['–ü—Ä–æ–µ–∑–¥ (—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã)', '–õ–∏–∑–∏–Ω–≥'],
      ['–ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã']
    ]).oneTime().resize());
  }

  else if (type === 'ai') {
    state.step = 'ai';
    state.substep = 'ai_wait';
    ctx.reply(`üí∞ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ—Ö–æ–¥–æ–º/—Ä–∞—Å—Ö–æ–¥–æ–º:
(–ø—Ä–∏–º–µ—Ä: –î–æ—Ö–æ–¥: –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –Ω–∞ —Å—É–º–º—É 50000 —Ä—É–± –±–µ–∑ –ù–î–°, –¥–∞—Ç–∞: 01.05.2025
–†–∞—Å—Ö–æ–¥: 10000 —Å –ù–î–°, –∫–∞—Ç–µ–≥–æ—Ä–∏—è - –§–û–¢ –†–ü, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)`);
  }

  else {
    ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–ø–∏—Å–∏.');
  }
});

bot.action('back_to_menu', async (ctx) => {
  const chatId = ctx.chat.id;
  const state = userState[chatId];
  if (!state?.sheet) {
    return ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç —Å–Ω–∞—á–∞–ª–∞.');
  }

  await ctx.reply(
    '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏?',
    Markup.inlineKeyboard([
      [Markup.button.callback('‚ûï –†–∞—Å—Ö–æ–¥', 'input:expense'), Markup.button.callback('üí∞ –î–æ—Ö–æ–¥', 'input:income')],
      [Markup.button.callback('ü§ñ AI-–≤–≤–æ–¥', 'input:ai'), Markup.button.callback('üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π', 'preview')],
      [Markup.button.callback('üì§ –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É', 'download')],
      [Markup.button.callback('üîô –ö –ø—Ä–æ–µ–∫—Ç–∞–º', 'back_to_projects')]
    ])
  );
});
