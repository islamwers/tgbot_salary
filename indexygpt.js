const { Telegraf, Markup } = require('telegraf');
const { google } = require('googleapis');
const fetch = require('node-fetch');
require('dotenv').config();

console.log('üß™ INDEX.JS –ó–ê–ü–£–©–ï–ù');

const bot = new Telegraf(process.env.BOT_TOKEN);
let userState = {};

const YANDEX_API_URL = 'https://llm.api.cloud.yandex.net/foundationModels/v1/completion';

// –ö–æ–º–∞–Ω–¥–∞ /start —Å –≤—ã–±–æ—Ä–æ–º —Å–ø–æ—Å–æ–±–∞
bot.start((ctx) => {
  userState[ctx.chat.id] = {};
  ctx.reply(
    'üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–ø–ª–∞—Ç—É.\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö:',
    Markup.inlineKeyboard([
      [Markup.button.callback('üìù –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é', 'manual')],
      [Markup.button.callback('ü§ñ –í–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º (YandexGPT)', 'ai_input')]
    ])
  );
});

bot.action('manual', (ctx) => {
  userState[ctx.chat.id] = { step: 'fio' };
  ctx.reply('‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –§–ò–û:');
});

bot.action('ai_input', (ctx) => {
  userState[ctx.chat.id] = { step: 'ai_wait' };
  ctx.reply('üß† –í–≤–µ–¥–∏—Ç–µ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:\n\n–ü—Ä–∏–º–µ—Ä:\n–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á, –∏–Ω–∂–µ–Ω–µ—Ä, 12 —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤, 12000 —Ä—É–±, –º–∞–π 2025');
});

// –†—É—á–Ω–æ–π –ø–æ—à–∞–≥–æ–≤—ã–π –≤–≤–æ–¥
bot.on('text', async (ctx) => {
  const chatId = ctx.chat.id;
  const text = ctx.message.text;

  if (!userState[chatId]) {
    ctx.reply('–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.');
    return;
  }

  const state = userState[chatId];

  if (state.step === 'fio') {
    state.fio = text;
    state.step = 'role';
    ctx.reply('üíº –í–≤–µ–¥–∏—Ç–µ —Ä–æ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∏–Ω–∂–µ–Ω–µ—Ä, –ò–¢–†, –º–æ–Ω—Ç–∞–∂–Ω–∏–∫):');
  } else if (state.step === 'role') {
    state.role = text;
    state.step = 'lights';
    ctx.reply('üí° –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤:');
  } else if (state.step === 'lights') {
    state.lights = text;
    state.step = 'amount';
    ctx.reply('üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–ø–ª–∞—Ç—ã (–ó–ü –±–µ–∑ –ù–î–§–õ):');
  } else if (state.step === 'amount') {
    state.amount = text;
    state.step = 'period';
    ctx.reply('üìÜ –ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –º–∞–π 2025):');
  } else if (state.step === 'period') {
    state.period = text;
    state.date = new Date().toISOString().split('T')[0];

    try {
      await appendToSheet(state);
      ctx.reply(
        '‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ Google –¢–∞–±–ª–∏—Ü—É!',
        Markup.inlineKeyboard([
          [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –∑–∞—è–≤–∫—É', 'manual')],
          [Markup.button.callback('üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å', 'done')]
        ])
      );
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheet:', err);
      ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏.');
    }

    delete userState[chatId];
  } else if (state.step === 'ai_wait') {
    const yandexPrompt = `–ò–∑–≤–ª–µ–∫–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—è: –§–ò–û, —Ä–æ–ª—å, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤, —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç—ã (–ó–ü –±–µ–∑ –ù–î–§–õ), –∏ –ø–µ—Ä–∏–æ–¥. –í–µ—Ä–Ω–∏ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ: { "fio": "...", "role": "...", "lights": "...", "amount": "...", "period": "..." }. –¢–µ–∫—Å—Ç: "${text}"`;

    try {
      const response = await fetch(YANDEX_API_URL, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${process.env.YANDEX_IAM_TOKEN}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          modelUri: `gpt://${process.env.YANDEX_FOLDER_ID}/yandexgpt/latest`,
          completionOptions: {
            stream: false,
            temperature: 0.3,
            maxTokens: 1000
          },
          messages: [
            { role: 'system', text: '–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.' },
            { role: 'user', text: yandexPrompt }
          ]
        })
      });

      const result = await response.json();

      const aiText = result.result?.alternatives?.[0]?.message?.text;
      if (!aiText) throw new Error('YandexGPT –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç');

      let extracted;
      try {
        console.log('üì• –û—Ç–≤–µ—Ç YandexGPT:\n' + aiText);
        extracted = JSON.parse(aiText);
      } catch (parseErr) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:\n', aiText);
        ctx.reply('‚ö†Ô∏è YandexGPT –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.');
        delete userState[chatId];
        return;
      }

      const newData = {
        fio: extracted.fio,
        role: extracted.role,
        lights: extracted.lights,
        amount: extracted.amount,
        period: extracted.period,
        date: new Date().toISOString().split('T')[0]
      };

      await appendToSheet(newData);
      ctx.reply(
        `‚úÖ –ì–æ—Ç–æ–≤–æ! –ó–∞—è–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞:\nüë§ ${newData.fio}\nüíº ${newData.role}\nüí° ${newData.lights} —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤\nüí∞ ${newData.amount}\nüìÜ ${newData.period}`,
        Markup.inlineKeyboard([
          [Markup.button.callback('‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É –∑–∞—è–≤–∫—É', 'ai_input')],
          [Markup.button.callback('üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å', 'done')]
        ])
      );
    } catch (err) {
      console.error('‚ùå –û—à–∏–±–∫–∞ YandexGPT-–≤–≤–æ–¥–∞:', err.message);
      ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å AI-–≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é.');
    }

    delete userState[chatId];
  }
});

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
bot.action('done', (ctx) => {
  ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞, –≤–≤–µ–¥–∏—Ç–µ /start');
});

// Google –¢–∞–±–ª–∏—Ü–∞
async function appendToSheet(data) {
  const auth = new google.auth.GoogleAuth({
    keyFile: 'credentials.json',
    scopes: ['https://www.googleapis.com/auth/spreadsheets'],
  });

  const client = await auth.getClient();
  const sheets = google.sheets({ version: 'v4', auth: client });

  await sheets.spreadsheets.values.append({
    spreadsheetId: process.env.SHEET_ID,
    range: '–õ–∏—Å—Ç1!A1:G1',
    valueInputOption: 'USER_ENTERED',
    requestBody: {
      values: [
        [
          data.fio,
          data.role,
          data.lights,
          data.amount,
          '',
          data.date,
          data.period
        ]
      ]
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Yandex Cloud Function
module.exports.handler = async function(event) {
  console.log('üö® HANDLER –°–†–ê–ë–û–¢–ê–õ');
  console.log('üì¶ RAW EVENT:', JSON.stringify(event, null, 2));

  try {
    const body = typeof event.body === 'string' ? JSON.parse(event.body) : event.body;
    await bot.handleUpdate(body);
    return { statusCode: 200, body: 'ok' };
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', err.message);
    return { statusCode: 500, body: 'Internal Server Error' };
  }
};
